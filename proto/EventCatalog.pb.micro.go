// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/EventCatalog.proto

package EventCatalog

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EventCatalog service

func NewEventCatalogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EventCatalog service

type EventCatalogService interface {
	CreateEventWithCategory(ctx context.Context, in *CreateEventWithCategoryRequest, opts ...client.CallOption) (*CreateEventWithCategoryResponse, error)
	GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...client.CallOption) (*GetAllEventsResponse, error)
	GetEventById(ctx context.Context, in *GetEventByIdRequest, opts ...client.CallOption) (*GetEventByIdResponse, error)
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...client.CallOption) (*GetAllCategoriesResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventByEventIdRequest, opts ...client.CallOption) (*UpdateEventByEventIdResponse, error)
	DeleteEventById(ctx context.Context, in *DeleteEventByIdRequest, opts ...client.CallOption) (*DeleteEventByIdResponse, error)
	GetEventByField(ctx context.Context, in *GetEventByFieldRequest, opts ...client.CallOption) (*GetEventByFieldResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error)
}

type eventCatalogService struct {
	c    client.Client
	name string
}

func NewEventCatalogService(name string, c client.Client) EventCatalogService {
	return &eventCatalogService{
		c:    c,
		name: name,
	}
}

func (c *eventCatalogService) CreateEventWithCategory(ctx context.Context, in *CreateEventWithCategoryRequest, opts ...client.CallOption) (*CreateEventWithCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.CreateEventWithCategory", in)
	out := new(CreateEventWithCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...client.CallOption) (*GetAllEventsResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.GetAllEvents", in)
	out := new(GetAllEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) GetEventById(ctx context.Context, in *GetEventByIdRequest, opts ...client.CallOption) (*GetEventByIdResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.GetEventById", in)
	out := new(GetEventByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...client.CallOption) (*GetAllCategoriesResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.GetAllCategories", in)
	out := new(GetAllCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) UpdateEvent(ctx context.Context, in *UpdateEventByEventIdRequest, opts ...client.CallOption) (*UpdateEventByEventIdResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.UpdateEvent", in)
	out := new(UpdateEventByEventIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) DeleteEventById(ctx context.Context, in *DeleteEventByIdRequest, opts ...client.CallOption) (*DeleteEventByIdResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.DeleteEventById", in)
	out := new(DeleteEventByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) GetEventByField(ctx context.Context, in *GetEventByFieldRequest, opts ...client.CallOption) (*GetEventByFieldResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.GetEventByField", in)
	out := new(GetEventByFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCatalogService) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "EventCatalog.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventCatalog service

type EventCatalogHandler interface {
	CreateEventWithCategory(context.Context, *CreateEventWithCategoryRequest, *CreateEventWithCategoryResponse) error
	GetAllEvents(context.Context, *GetAllEventsRequest, *GetAllEventsResponse) error
	GetEventById(context.Context, *GetEventByIdRequest, *GetEventByIdResponse) error
	GetAllCategories(context.Context, *GetAllCategoriesRequest, *GetAllCategoriesResponse) error
	UpdateEvent(context.Context, *UpdateEventByEventIdRequest, *UpdateEventByEventIdResponse) error
	DeleteEventById(context.Context, *DeleteEventByIdRequest, *DeleteEventByIdResponse) error
	GetEventByField(context.Context, *GetEventByFieldRequest, *GetEventByFieldResponse) error
	CreateCategory(context.Context, *CreateCategoryRequest, *CreateCategoryResponse) error
}

func RegisterEventCatalogHandler(s server.Server, hdlr EventCatalogHandler, opts ...server.HandlerOption) error {
	type eventCatalog interface {
		CreateEventWithCategory(ctx context.Context, in *CreateEventWithCategoryRequest, out *CreateEventWithCategoryResponse) error
		GetAllEvents(ctx context.Context, in *GetAllEventsRequest, out *GetAllEventsResponse) error
		GetEventById(ctx context.Context, in *GetEventByIdRequest, out *GetEventByIdResponse) error
		GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, out *GetAllCategoriesResponse) error
		UpdateEvent(ctx context.Context, in *UpdateEventByEventIdRequest, out *UpdateEventByEventIdResponse) error
		DeleteEventById(ctx context.Context, in *DeleteEventByIdRequest, out *DeleteEventByIdResponse) error
		GetEventByField(ctx context.Context, in *GetEventByFieldRequest, out *GetEventByFieldResponse) error
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error
	}
	type EventCatalog struct {
		eventCatalog
	}
	h := &eventCatalogHandler{hdlr}
	return s.Handle(s.NewHandler(&EventCatalog{h}, opts...))
}

type eventCatalogHandler struct {
	EventCatalogHandler
}

func (h *eventCatalogHandler) CreateEventWithCategory(ctx context.Context, in *CreateEventWithCategoryRequest, out *CreateEventWithCategoryResponse) error {
	return h.EventCatalogHandler.CreateEventWithCategory(ctx, in, out)
}

func (h *eventCatalogHandler) GetAllEvents(ctx context.Context, in *GetAllEventsRequest, out *GetAllEventsResponse) error {
	return h.EventCatalogHandler.GetAllEvents(ctx, in, out)
}

func (h *eventCatalogHandler) GetEventById(ctx context.Context, in *GetEventByIdRequest, out *GetEventByIdResponse) error {
	return h.EventCatalogHandler.GetEventById(ctx, in, out)
}

func (h *eventCatalogHandler) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, out *GetAllCategoriesResponse) error {
	return h.EventCatalogHandler.GetAllCategories(ctx, in, out)
}

func (h *eventCatalogHandler) UpdateEvent(ctx context.Context, in *UpdateEventByEventIdRequest, out *UpdateEventByEventIdResponse) error {
	return h.EventCatalogHandler.UpdateEvent(ctx, in, out)
}

func (h *eventCatalogHandler) DeleteEventById(ctx context.Context, in *DeleteEventByIdRequest, out *DeleteEventByIdResponse) error {
	return h.EventCatalogHandler.DeleteEventById(ctx, in, out)
}

func (h *eventCatalogHandler) GetEventByField(ctx context.Context, in *GetEventByFieldRequest, out *GetEventByFieldResponse) error {
	return h.EventCatalogHandler.GetEventByField(ctx, in, out)
}

func (h *eventCatalogHandler) CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error {
	return h.EventCatalogHandler.CreateCategory(ctx, in, out)
}
