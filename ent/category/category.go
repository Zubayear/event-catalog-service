// Code generated by entc, DO NOT EDIT.

package category

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "Events"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// EventsTable is the table that holds the Events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the Events relation/edge.
	EventsColumn = "category_events"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Name defines the type for the "Name" enum field.
type Name string

// Name values.
const (
	NameCONCERTS Name = "CONCERTS"
	NameMUSICALS Name = "MUSICALS"
	NamePLAYS    Name = "PLAYS"
)

func (_name Name) String() string {
	return string(_name)
}

// NameValidator is a validator for the "Name" field enum values. It is called by the builders before save.
func NameValidator(_name Name) error {
	switch _name {
	case NameCONCERTS, NameMUSICALS, NamePLAYS:
		return nil
	default:
		return fmt.Errorf("category: invalid enum value for Name field: %q", _name)
	}
}
